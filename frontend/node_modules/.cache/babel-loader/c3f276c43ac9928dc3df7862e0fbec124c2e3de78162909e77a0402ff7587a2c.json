{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nimport { UserService } from \"../../services\";\nimport { formatErrorResponse } from \"../../utils\";\nexport const loadUserAction = createAsyncThunk(\"user/me\", async thunkAPI => {\n  try {\n    const response = await UserService.loadUser();\n    return response.data;\n  } catch (error) {\n    const message = formatErrorResponse(error);\n    toast.error(message);\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nconst initialState = {\n  isLoading: false,\n  user: {}\n};\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(loadUserAction.pending, state => {\n      state.isLoading = true;\n    });\n    builder.addCase(loadUserAction.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.user = action.payload;\n    });\n    builder.addCase(loadUserAction.rejected, (state, action) => {\n      state.isLoading = false;\n      state.user = {};\n    });\n  }\n});\nconst {\n  reducer\n} = userSlice;\nexport default reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","toast","UserService","formatErrorResponse","loadUserAction","thunkAPI","response","loadUser","data","error","message","rejectWithValue","initialState","isLoading","user","userSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","reducer"],"sources":["/Users/macbook/Documents/GitHub/oi-web-dev-assessment/frontend/src/redux/slices/user.slice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nimport { UserService } from \"../../services\";\nimport { formatErrorResponse } from \"../../utils\";\n\nexport const loadUserAction = createAsyncThunk(\"user/me\", async (thunkAPI) => {\n  try {\n    const response = await UserService.loadUser();\n    return response.data;\n  } catch (error) {\n    const message = formatErrorResponse(error);\n    toast.error(message);\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\nconst initialState = {\n  isLoading: false,\n  user: {},\n};\n\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(loadUserAction.pending, (state) => {\n      state.isLoading = true;\n    });\n    builder.addCase(loadUserAction.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.user = action.payload;\n    });\n    builder.addCase(loadUserAction.rejected, (state, action) => {\n      state.isLoading = false;\n      state.user = {};\n    });\n  },\n});\n\nconst { reducer } = userSlice;\nexport default reducer;\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,KAAK,QAAQ,gBAAgB;AACtC,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,mBAAmB,QAAQ,aAAa;AAEjD,OAAO,MAAMC,cAAc,GAAGL,gBAAgB,CAAC,SAAS,EAAE,MAAOM,QAAQ,IAAK;EAC5E,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,WAAW,CAACK,QAAQ,EAAE;IAC7C,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMC,OAAO,GAAGP,mBAAmB,CAACM,KAAK,CAAC;IAC1CR,KAAK,CAACQ,KAAK,CAACC,OAAO,CAAC;IACpB,OAAOL,QAAQ,CAACM,eAAe,CAACD,OAAO,CAAC;EAC1C;AACF,CAAC,CAAC;AAEF,MAAME,YAAY,GAAG;EACnBC,SAAS,EAAE,KAAK;EAChBC,IAAI,EAAE,CAAC;AACT,CAAC;AAED,MAAMC,SAAS,GAAGf,WAAW,CAAC;EAC5BgB,IAAI,EAAE,MAAM;EACZJ,YAAY;EACZK,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,OAAO,CAAChB,cAAc,CAACiB,OAAO,EAAGC,KAAK,IAAK;MACjDA,KAAK,CAACT,SAAS,GAAG,IAAI;IACxB,CAAC,CAAC;IACFM,OAAO,CAACC,OAAO,CAAChB,cAAc,CAACmB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC3DF,KAAK,CAACT,SAAS,GAAG,KAAK;MACvBS,KAAK,CAACR,IAAI,GAAGU,MAAM,CAACC,OAAO;IAC7B,CAAC,CAAC;IACFN,OAAO,CAACC,OAAO,CAAChB,cAAc,CAACsB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAC1DF,KAAK,CAACT,SAAS,GAAG,KAAK;MACvBS,KAAK,CAACR,IAAI,GAAG,CAAC,CAAC;IACjB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,MAAM;EAAEa;AAAQ,CAAC,GAAGZ,SAAS;AAC7B,eAAeY,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}