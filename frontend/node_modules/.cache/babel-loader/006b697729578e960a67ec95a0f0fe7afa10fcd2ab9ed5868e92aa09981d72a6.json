{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nimport { PostService } from \"../../services\";\nimport { formatErrorResponse } from \"../../utils\";\nexport const getPostsAction = createAsyncThunk(\"post/all\", async thunkAPI => {\n  try {\n    const data = await PostService.getAllPosts();\n    return data.data;\n  } catch (error) {\n    const message = formatErrorResponse(error);\n    toast.error(message);\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const createPostAction = createAsyncThunk(\"post/create\", async (_ref, thunkAPI) => {\n  let {\n    title,\n    content,\n    image,\n    tagIds,\n    categoryId\n  } = _ref;\n  try {\n    const response = await PostService.createPost(title, content, image, tagIds, categoryId);\n    toast.success(\"post created successfully\");\n    return response.data;\n  } catch (error) {\n    const message = formatErrorResponse(error);\n    console.log(error, \"error\");\n    toast.error(message);\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const updatePostAction = createAsyncThunk(\"post/update\", async (_ref2, thunkAPI) => {\n  let {\n    title,\n    content,\n    image,\n    id,\n    tagIds,\n    categoryId\n  } = _ref2;\n  try {\n    const response = await PostService.updatePost(title, content, image, id, tagIds, categoryId);\n    toast.success(\"edited successfully\");\n    return response.data;\n  } catch (error) {\n    const message = formatErrorResponse(error);\n    console.log(error, \"err\");\n    toast.error(message);\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const singlePostAction = createAsyncThunk(\"post/single\", async (id, thunkAPI) => {\n  try {\n    const response = await PostService.getSinglePosts(id);\n    return response.data;\n  } catch (error) {\n    const message = formatErrorResponse(error);\n    toast.error(message);\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const deletePostAction = createAsyncThunk(\"post/delete\", async (id, thunkAPI) => {\n  try {\n    const response = await PostService.deletePosts(id);\n    toast.success(\"deleted successfully\");\n    return response.data;\n  } catch (error) {\n    const message = formatErrorResponse(error);\n    toast.error(message);\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nconst initialState = {\n  isLoading: true,\n  postsData: []\n};\nconst postSlice = createSlice({\n  name: \"post\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    // All post cases\n    builder.addCase(getPostsAction.pending, state => {\n      state.isLoading = true;\n      state.postsData = [];\n    });\n    builder.addCase(getPostsAction.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.postsData = action.payload;\n    });\n    builder.addCase(getPostsAction.rejected, state => {\n      state.isLoading = false;\n    });\n\n    // All single post cases\n    builder.addCase(singlePostAction.pending, state => {\n      state.isLoading = true;\n      state.postsData = [];\n    });\n    builder.addCase(singlePostAction.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.postsData = action.payload;\n    });\n    builder.addCase(singlePostAction.rejected, state => {\n      state.isLoading = false;\n    });\n\n    // create Post cases\n    builder.addCase(createPostAction.pending, state => {\n      state.isLoading = true;\n    });\n    builder.addCase(createPostAction.fulfilled, state => {\n      state.isLoading = false;\n    });\n    builder.addCase(createPostAction.rejected, state => {\n      state.isLoading = false;\n    });\n\n    // update Post cases\n    builder.addCase(updatePostAction.pending, state => {\n      state.isLoading = true;\n    });\n    builder.addCase(updatePostAction.fulfilled, state => {\n      state.isLoading = false;\n    });\n    builder.addCase(updatePostAction.rejected, state => {\n      state.isLoading = false;\n    });\n\n    // delete Post cases\n    builder.addCase(deletePostAction.pending, state => {\n      state.isLoading = true;\n    });\n    builder.addCase(deletePostAction.fulfilled, state => {\n      state.isLoading = false;\n    });\n    builder.addCase(deletePostAction.rejected, state => {\n      state.isLoading = false;\n    });\n  }\n});\nconst {\n  reducer\n} = postSlice;\nexport default reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","toast","PostService","formatErrorResponse","getPostsAction","thunkAPI","data","getAllPosts","error","message","rejectWithValue","createPostAction","_ref","title","content","image","tagIds","categoryId","response","createPost","success","console","log","updatePostAction","_ref2","id","updatePost","singlePostAction","getSinglePosts","deletePostAction","deletePosts","initialState","isLoading","postsData","postSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","reducer"],"sources":["/Users/macbook/Documents/GitHub/oi-web-dev-assessment/frontend/src/redux/slices/post.slice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nimport { PostService } from \"../../services\";\nimport { formatErrorResponse } from \"../../utils\";\n\nexport const getPostsAction = createAsyncThunk(\"post/all\", async (thunkAPI) => {\n  try {\n    const data = await PostService.getAllPosts();\n    return data.data;\n  } catch (error) {\n    const message = formatErrorResponse(error);\n    toast.error(message);\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\nexport const createPostAction = createAsyncThunk(\n  \"post/create\",\n  async ({ title, content, image, tagIds, categoryId }, thunkAPI) => {\n    try {\n      const response = await PostService.createPost(\n        title,\n        content,\n        image,\n        tagIds,\n        categoryId\n      );\n      toast.success(\"post created successfully\");\n      return response.data;\n    } catch (error) {\n      const message = formatErrorResponse(error);\n      console.log(error, \"error\");\n      toast.error(message);\n      return thunkAPI.rejectWithValue(message);\n    }\n  }\n);\n\nexport const updatePostAction = createAsyncThunk(\n  \"post/update\",\n  async ({ title, content, image, id, tagIds, categoryId }, thunkAPI) => {\n    try {\n      const response = await PostService.updatePost(\n        title,\n        content,\n        image,\n        id,\n        tagIds,\n        categoryId\n      );\n      toast.success(\"edited successfully\");\n      return response.data;\n    } catch (error) {\n      const message = formatErrorResponse(error);\n      console.log(error, \"err\");\n      toast.error(message);\n      return thunkAPI.rejectWithValue(message);\n    }\n  }\n);\n\nexport const singlePostAction = createAsyncThunk(\n  \"post/single\",\n  async (id, thunkAPI) => {\n    try {\n      const response = await PostService.getSinglePosts(id);\n      return response.data;\n    } catch (error) {\n      const message = formatErrorResponse(error);\n      toast.error(message);\n      return thunkAPI.rejectWithValue(message);\n    }\n  }\n);\n\nexport const deletePostAction = createAsyncThunk(\n  \"post/delete\",\n  async (id, thunkAPI) => {\n    try {\n      const response = await PostService.deletePosts(id);\n      toast.success(\"deleted successfully\");\n      return response.data;\n    } catch (error) {\n      const message = formatErrorResponse(error);\n      toast.error(message);\n      return thunkAPI.rejectWithValue(message);\n    }\n  }\n);\n\nconst initialState = {\n  isLoading: true,\n  postsData: [],\n};\n\nconst postSlice = createSlice({\n  name: \"post\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    // All post cases\n    builder.addCase(getPostsAction.pending, (state) => {\n      state.isLoading = true;\n      state.postsData = [];\n    });\n    builder.addCase(getPostsAction.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.postsData = action.payload;\n    });\n    builder.addCase(getPostsAction.rejected, (state) => {\n      state.isLoading = false;\n    });\n\n    // All single post cases\n    builder.addCase(singlePostAction.pending, (state) => {\n      state.isLoading = true;\n      state.postsData = [];\n    });\n    builder.addCase(singlePostAction.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.postsData = action.payload;\n    });\n    builder.addCase(singlePostAction.rejected, (state) => {\n      state.isLoading = false;\n    });\n\n    // create Post cases\n    builder.addCase(createPostAction.pending, (state) => {\n      state.isLoading = true;\n    });\n    builder.addCase(createPostAction.fulfilled, (state) => {\n      state.isLoading = false;\n    });\n    builder.addCase(createPostAction.rejected, (state) => {\n      state.isLoading = false;\n    });\n\n    // update Post cases\n    builder.addCase(updatePostAction.pending, (state) => {\n      state.isLoading = true;\n    });\n    builder.addCase(updatePostAction.fulfilled, (state) => {\n      state.isLoading = false;\n    });\n    builder.addCase(updatePostAction.rejected, (state) => {\n      state.isLoading = false;\n    });\n\n    // delete Post cases\n    builder.addCase(deletePostAction.pending, (state) => {\n      state.isLoading = true;\n    });\n    builder.addCase(deletePostAction.fulfilled, (state) => {\n      state.isLoading = false;\n    });\n    builder.addCase(deletePostAction.rejected, (state) => {\n      state.isLoading = false;\n    });\n  },\n});\n\nconst { reducer } = postSlice;\nexport default reducer;\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,KAAK,QAAQ,gBAAgB;AACtC,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,mBAAmB,QAAQ,aAAa;AAEjD,OAAO,MAAMC,cAAc,GAAGL,gBAAgB,CAAC,UAAU,EAAE,MAAOM,QAAQ,IAAK;EAC7E,IAAI;IACF,MAAMC,IAAI,GAAG,MAAMJ,WAAW,CAACK,WAAW,EAAE;IAC5C,OAAOD,IAAI,CAACA,IAAI;EAClB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,MAAMC,OAAO,GAAGN,mBAAmB,CAACK,KAAK,CAAC;IAC1CP,KAAK,CAACO,KAAK,CAACC,OAAO,CAAC;IACpB,OAAOJ,QAAQ,CAACK,eAAe,CAACD,OAAO,CAAC;EAC1C;AACF,CAAC,CAAC;AAEF,OAAO,MAAME,gBAAgB,GAAGZ,gBAAgB,CAC9C,aAAa,EACb,OAAAa,IAAA,EAAsDP,QAAQ,KAAK;EAAA,IAA5D;IAAEQ,KAAK;IAAEC,OAAO;IAAEC,KAAK;IAAEC,MAAM;IAAEC;EAAW,CAAC,GAAAL,IAAA;EAClD,IAAI;IACF,MAAMM,QAAQ,GAAG,MAAMhB,WAAW,CAACiB,UAAU,CAC3CN,KAAK,EACLC,OAAO,EACPC,KAAK,EACLC,MAAM,EACNC,UAAU,CACX;IACDhB,KAAK,CAACmB,OAAO,CAAC,2BAA2B,CAAC;IAC1C,OAAOF,QAAQ,CAACZ,IAAI;EACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,MAAMC,OAAO,GAAGN,mBAAmB,CAACK,KAAK,CAAC;IAC1Ca,OAAO,CAACC,GAAG,CAACd,KAAK,EAAE,OAAO,CAAC;IAC3BP,KAAK,CAACO,KAAK,CAACC,OAAO,CAAC;IACpB,OAAOJ,QAAQ,CAACK,eAAe,CAACD,OAAO,CAAC;EAC1C;AACF,CAAC,CACF;AAED,OAAO,MAAMc,gBAAgB,GAAGxB,gBAAgB,CAC9C,aAAa,EACb,OAAAyB,KAAA,EAA0DnB,QAAQ,KAAK;EAAA,IAAhE;IAAEQ,KAAK;IAAEC,OAAO;IAAEC,KAAK;IAAEU,EAAE;IAAET,MAAM;IAAEC;EAAW,CAAC,GAAAO,KAAA;EACtD,IAAI;IACF,MAAMN,QAAQ,GAAG,MAAMhB,WAAW,CAACwB,UAAU,CAC3Cb,KAAK,EACLC,OAAO,EACPC,KAAK,EACLU,EAAE,EACFT,MAAM,EACNC,UAAU,CACX;IACDhB,KAAK,CAACmB,OAAO,CAAC,qBAAqB,CAAC;IACpC,OAAOF,QAAQ,CAACZ,IAAI;EACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,MAAMC,OAAO,GAAGN,mBAAmB,CAACK,KAAK,CAAC;IAC1Ca,OAAO,CAACC,GAAG,CAACd,KAAK,EAAE,KAAK,CAAC;IACzBP,KAAK,CAACO,KAAK,CAACC,OAAO,CAAC;IACpB,OAAOJ,QAAQ,CAACK,eAAe,CAACD,OAAO,CAAC;EAC1C;AACF,CAAC,CACF;AAED,OAAO,MAAMkB,gBAAgB,GAAG5B,gBAAgB,CAC9C,aAAa,EACb,OAAO0B,EAAE,EAAEpB,QAAQ,KAAK;EACtB,IAAI;IACF,MAAMa,QAAQ,GAAG,MAAMhB,WAAW,CAAC0B,cAAc,CAACH,EAAE,CAAC;IACrD,OAAOP,QAAQ,CAACZ,IAAI;EACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,MAAMC,OAAO,GAAGN,mBAAmB,CAACK,KAAK,CAAC;IAC1CP,KAAK,CAACO,KAAK,CAACC,OAAO,CAAC;IACpB,OAAOJ,QAAQ,CAACK,eAAe,CAACD,OAAO,CAAC;EAC1C;AACF,CAAC,CACF;AAED,OAAO,MAAMoB,gBAAgB,GAAG9B,gBAAgB,CAC9C,aAAa,EACb,OAAO0B,EAAE,EAAEpB,QAAQ,KAAK;EACtB,IAAI;IACF,MAAMa,QAAQ,GAAG,MAAMhB,WAAW,CAAC4B,WAAW,CAACL,EAAE,CAAC;IAClDxB,KAAK,CAACmB,OAAO,CAAC,sBAAsB,CAAC;IACrC,OAAOF,QAAQ,CAACZ,IAAI;EACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,MAAMC,OAAO,GAAGN,mBAAmB,CAACK,KAAK,CAAC;IAC1CP,KAAK,CAACO,KAAK,CAACC,OAAO,CAAC;IACpB,OAAOJ,QAAQ,CAACK,eAAe,CAACD,OAAO,CAAC;EAC1C;AACF,CAAC,CACF;AAED,MAAMsB,YAAY,GAAG;EACnBC,SAAS,EAAE,IAAI;EACfC,SAAS,EAAE;AACb,CAAC;AAED,MAAMC,SAAS,GAAGlC,WAAW,CAAC;EAC5BmC,IAAI,EAAE,MAAM;EACZJ,YAAY;EACZK,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1B;IACAA,OAAO,CAACC,OAAO,CAACnC,cAAc,CAACoC,OAAO,EAAGC,KAAK,IAAK;MACjDA,KAAK,CAACT,SAAS,GAAG,IAAI;MACtBS,KAAK,CAACR,SAAS,GAAG,EAAE;IACtB,CAAC,CAAC;IACFK,OAAO,CAACC,OAAO,CAACnC,cAAc,CAACsC,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC3DF,KAAK,CAACT,SAAS,GAAG,KAAK;MACvBS,KAAK,CAACR,SAAS,GAAGU,MAAM,CAACC,OAAO;IAClC,CAAC,CAAC;IACFN,OAAO,CAACC,OAAO,CAACnC,cAAc,CAACyC,QAAQ,EAAGJ,KAAK,IAAK;MAClDA,KAAK,CAACT,SAAS,GAAG,KAAK;IACzB,CAAC,CAAC;;IAEF;IACAM,OAAO,CAACC,OAAO,CAACZ,gBAAgB,CAACa,OAAO,EAAGC,KAAK,IAAK;MACnDA,KAAK,CAACT,SAAS,GAAG,IAAI;MACtBS,KAAK,CAACR,SAAS,GAAG,EAAE;IACtB,CAAC,CAAC;IACFK,OAAO,CAACC,OAAO,CAACZ,gBAAgB,CAACe,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC7DF,KAAK,CAACT,SAAS,GAAG,KAAK;MACvBS,KAAK,CAACR,SAAS,GAAGU,MAAM,CAACC,OAAO;IAClC,CAAC,CAAC;IACFN,OAAO,CAACC,OAAO,CAACZ,gBAAgB,CAACkB,QAAQ,EAAGJ,KAAK,IAAK;MACpDA,KAAK,CAACT,SAAS,GAAG,KAAK;IACzB,CAAC,CAAC;;IAEF;IACAM,OAAO,CAACC,OAAO,CAAC5B,gBAAgB,CAAC6B,OAAO,EAAGC,KAAK,IAAK;MACnDA,KAAK,CAACT,SAAS,GAAG,IAAI;IACxB,CAAC,CAAC;IACFM,OAAO,CAACC,OAAO,CAAC5B,gBAAgB,CAAC+B,SAAS,EAAGD,KAAK,IAAK;MACrDA,KAAK,CAACT,SAAS,GAAG,KAAK;IACzB,CAAC,CAAC;IACFM,OAAO,CAACC,OAAO,CAAC5B,gBAAgB,CAACkC,QAAQ,EAAGJ,KAAK,IAAK;MACpDA,KAAK,CAACT,SAAS,GAAG,KAAK;IACzB,CAAC,CAAC;;IAEF;IACAM,OAAO,CAACC,OAAO,CAAChB,gBAAgB,CAACiB,OAAO,EAAGC,KAAK,IAAK;MACnDA,KAAK,CAACT,SAAS,GAAG,IAAI;IACxB,CAAC,CAAC;IACFM,OAAO,CAACC,OAAO,CAAChB,gBAAgB,CAACmB,SAAS,EAAGD,KAAK,IAAK;MACrDA,KAAK,CAACT,SAAS,GAAG,KAAK;IACzB,CAAC,CAAC;IACFM,OAAO,CAACC,OAAO,CAAChB,gBAAgB,CAACsB,QAAQ,EAAGJ,KAAK,IAAK;MACpDA,KAAK,CAACT,SAAS,GAAG,KAAK;IACzB,CAAC,CAAC;;IAEF;IACAM,OAAO,CAACC,OAAO,CAACV,gBAAgB,CAACW,OAAO,EAAGC,KAAK,IAAK;MACnDA,KAAK,CAACT,SAAS,GAAG,IAAI;IACxB,CAAC,CAAC;IACFM,OAAO,CAACC,OAAO,CAACV,gBAAgB,CAACa,SAAS,EAAGD,KAAK,IAAK;MACrDA,KAAK,CAACT,SAAS,GAAG,KAAK;IACzB,CAAC,CAAC;IACFM,OAAO,CAACC,OAAO,CAACV,gBAAgB,CAACgB,QAAQ,EAAGJ,KAAK,IAAK;MACpDA,KAAK,CAACT,SAAS,GAAG,KAAK;IACzB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,MAAM;EAAEc;AAAQ,CAAC,GAAGZ,SAAS;AAC7B,eAAeY,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}