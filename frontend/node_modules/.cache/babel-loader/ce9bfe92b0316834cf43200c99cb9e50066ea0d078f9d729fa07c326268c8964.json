{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nimport { CategoryService } from \"../../services\";\nimport { formatErrorResponse } from \"../../utils\";\nexport const getPostsAction = createAsyncThunk(\"posts\", async thunkAPI => {\n  try {\n    const response = await CategoryService.getAllCategories();\n    return response.data;\n  } catch (error) {\n    const message = formatErrorResponse(error);\n    toast.error(message);\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nconst initialState = {\n  isLoading: true,\n  categoriesData: []\n};\nconst categorySlice = createSlice({\n  name: \"category\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getPostsAction.pending, state => {\n      state.isLoading = true;\n      state.postsData = [];\n    });\n    builder.addCase(getPostsAction.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.postsData = action.payload;\n    });\n    builder.addCase(getPostsAction.rejected, (state, action) => {\n      state.isLoading = false;\n    });\n  }\n});\nconst {\n  reducer\n} = categorySlice;\nexport default reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","toast","CategoryService","formatErrorResponse","getPostsAction","thunkAPI","response","getAllCategories","data","error","message","rejectWithValue","initialState","isLoading","categoriesData","categorySlice","name","reducers","extraReducers","builder","addCase","pending","state","postsData","fulfilled","action","payload","rejected","reducer"],"sources":["/Users/macbook/Documents/GitHub/oi-web-dev-assessment/frontend/src/redux/slices/category.slice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nimport { CategoryService } from \"../../services\";\nimport { formatErrorResponse } from \"../../utils\";\n\nexport const getPostsAction = createAsyncThunk(\"posts\", async (thunkAPI) => {\n  try {\n    const response = await CategoryService.getAllCategories();\n    return response.data;\n  } catch (error) {\n    const message = formatErrorResponse(error);\n    toast.error(message);\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\nconst initialState = {\n  isLoading: true,\n  categoriesData: [],\n};\n\nconst categorySlice = createSlice({\n  name: \"category\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(getPostsAction.pending, (state) => {\n      state.isLoading = true;\n      state.postsData = []\n    });\n    builder.addCase(getPostsAction.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.postsData = action.payload;\n    });\n    builder.addCase(getPostsAction.rejected, (state, action) => {\n      state.isLoading = false;\n    });\n  },\n});\n\nconst { reducer } = categorySlice;\nexport default reducer;\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,KAAK,QAAQ,gBAAgB;AACtC,SAASC,eAAe,QAAQ,gBAAgB;AAChD,SAASC,mBAAmB,QAAQ,aAAa;AAEjD,OAAO,MAAMC,cAAc,GAAGL,gBAAgB,CAAC,OAAO,EAAE,MAAOM,QAAQ,IAAK;EAC1E,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,eAAe,CAACK,gBAAgB,EAAE;IACzD,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMC,OAAO,GAAGP,mBAAmB,CAACM,KAAK,CAAC;IAC1CR,KAAK,CAACQ,KAAK,CAACC,OAAO,CAAC;IACpB,OAAOL,QAAQ,CAACM,eAAe,CAACD,OAAO,CAAC;EAC1C;AACF,CAAC,CAAC;AAEF,MAAME,YAAY,GAAG;EACnBC,SAAS,EAAE,IAAI;EACfC,cAAc,EAAE;AAClB,CAAC;AAED,MAAMC,aAAa,GAAGf,WAAW,CAAC;EAChCgB,IAAI,EAAE,UAAU;EAChBJ,YAAY;EACZK,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,OAAO,CAAChB,cAAc,CAACiB,OAAO,EAAGC,KAAK,IAAK;MACjDA,KAAK,CAACT,SAAS,GAAG,IAAI;MACtBS,KAAK,CAACC,SAAS,GAAG,EAAE;IACtB,CAAC,CAAC;IACFJ,OAAO,CAACC,OAAO,CAAChB,cAAc,CAACoB,SAAS,EAAE,CAACF,KAAK,EAAEG,MAAM,KAAK;MAC3DH,KAAK,CAACT,SAAS,GAAG,KAAK;MACvBS,KAAK,CAACC,SAAS,GAAGE,MAAM,CAACC,OAAO;IAClC,CAAC,CAAC;IACFP,OAAO,CAACC,OAAO,CAAChB,cAAc,CAACuB,QAAQ,EAAE,CAACL,KAAK,EAAEG,MAAM,KAAK;MAC1DH,KAAK,CAACT,SAAS,GAAG,KAAK;IACzB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,MAAM;EAAEe;AAAQ,CAAC,GAAGb,aAAa;AACjC,eAAea,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}