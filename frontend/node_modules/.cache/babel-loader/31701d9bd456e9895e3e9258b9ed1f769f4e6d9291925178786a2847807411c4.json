{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nimport { AuthService } from \"../../services\";\nimport { formatErrorResponse } from \"../../utils\";\nexport const login = createAsyncThunk(\"register\", async (_ref, thunkAPI) => {\n  let {\n    email,\n    password\n  } = _ref;\n  try {\n    const {\n      data\n    } = await AuthService.login(email, password);\n    return data;\n  } catch (error) {\n    const message = formatErrorResponse(error);\n    toast.error(message);\n    return thunkAPI.rejectWithValue(message);\n  }\n});","map":{"version":3,"names":["createAsyncThunk","createSlice","toast","AuthService","formatErrorResponse","login","_ref","thunkAPI","email","password","data","error","message","rejectWithValue"],"sources":["/Users/macbook/Documents/GitHub/oi-web-dev-assessment/frontend/src/redux/slices/auth.slice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nimport { AuthService } from \"../../services\";\nimport { formatErrorResponse } from \"../../utils\";\n\nexport const login = createAsyncThunk(\"register\", async ({email, password}, thunkAPI) => {\n  try {\n    const { data } = await AuthService.login(email, password);\n    return data;\n  } catch (error) {\n    const message = formatErrorResponse(error);\n    toast.error(message);\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,KAAK,QAAQ,gBAAgB;AACtC,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,mBAAmB,QAAQ,aAAa;AAEjD,OAAO,MAAMC,KAAK,GAAGL,gBAAgB,CAAC,UAAU,EAAE,OAAAM,IAAA,EAA0BC,QAAQ,KAAK;EAAA,IAAhC;IAACC,KAAK;IAAEC;EAAQ,CAAC,GAAAH,IAAA;EACxE,IAAI;IACF,MAAM;MAAEI;IAAK,CAAC,GAAG,MAAMP,WAAW,CAACE,KAAK,CAACG,KAAK,EAAEC,QAAQ,CAAC;IACzD,OAAOC,IAAI;EACb,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMC,OAAO,GAAGR,mBAAmB,CAACO,KAAK,CAAC;IAC1CT,KAAK,CAACS,KAAK,CAACC,OAAO,CAAC;IACpB,OAAOL,QAAQ,CAACM,eAAe,CAACD,OAAO,CAAC;EAC1C;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}